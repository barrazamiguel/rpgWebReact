{"version":3,"sources":["components/Home.js","datos.js","components/SeleccionarPersonaje.js","components/Juego.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","state","pj","to","React","Component","Pj","nombre","vida","this","ataques","ataque","push","Ataque","poder","patada","golpe","juan","addAttack","sofia","jorge","PJS","SeleccionarPersonaje","onSubmit","seleccionar","bind","onChange","datosPj","map","index","value","aria-live","type","e","setState","target","preventDefault","history","pathname","Juego","location","info","onClick","atacar","App","path","component","exact","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9cf3e7b5.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default class Home extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state ={\r\n      pj: props.pj\r\n    }\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Bienvenido:</h1>\r\n        <br />\r\n        <p>este es un juego mas.<br />\r\n        <Link to=\"/select\">Iniciar</Link>\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","class Pj {\r\n  constructor(nombre, vida) {\r\n    this.nombre = nombre;\r\n    this.vida = vida;\r\n    this.ataques = [];\r\n  }\r\n  addAttack(ataque) {\r\n    this.ataques.push(ataque);\r\n  }\r\n  \r\n}\r\n\r\nclass Ataque {\r\n  constructor(nombre, poder) {\r\n    this.nombre = nombre;\r\n    this.poder = poder;\r\n  }\r\n}\r\n\r\n// ataques:\r\nlet patada = new Ataque(\"patada\", 3);\r\nlet golpe = new Ataque(\"golpe\", 2);\r\n\r\n// declaracion de personajes:\r\nlet juan = new Pj(\"juan\", 20);\r\njuan.addAttack(patada);\r\njuan.addAttack(golpe);\r\n\r\nlet sofia = new Pj(\"sofia\", 30);\r\nsofia.addAttack(golpe);\r\n\r\n// enemigos:\r\nlet jorge = new Pj(\"jorge\", 20);\r\njorge.addAttack(patada);\r\njorge.addAttack(golpe);\r\n\r\n\r\n\r\n\r\nexport const PJS = [\r\njuan,\r\nsofia\r\n];\r\n\r\nexport  const PNJ = [jorge];\r\n","import React from 'react';\r\nimport {PJS} from '../datos';\r\n\r\nexport default class SeleccionarPersonaje extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state ={\r\n      pj: PJS[0]\r\n    }\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div>\r\n      <form onSubmit={this.seleccionar.bind(this)}>\r\n        <p>Seleccione con que personaje desea jugar:</p>\r\n        <p><select onChange={this.datosPj.bind(this)}>\r\n        {PJS.map((pj, index) => <option value={index}>{pj.nombre}</option>)}\r\n        </select></p>\r\n        <div aria-live=\"polite\">\r\n          <p><h1>Datos de {this.state.pj.nombre}:</h1>\r\n          puntos de vida: {this.state.pj.vida}.</p>\r\n        </div>\r\n        <p><input type=\"submit\" value=\"seleccionar\" /></p>\r\n      </form>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  datosPj(e) {\r\n    this.setState({ pj: PJS[e.target.value] });\r\n  }\r\n  \r\n  seleccionar(e) {\r\n    e.preventDefault();\r\n    this.props.history.push({\r\n      pathname: '/game',\r\n      state: { pj: this.state.pj }\r\n    })\r\n    }\r\n\r\n}\r\n","import React from 'react';\r\n\r\nexport default class Juego extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state ={\r\n      pj: props.location.state.pj,\r\n      info: \"Realiza tu primer ataque.\"\r\n    }\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Datos:</h1>\r\n        <p>{this.state.pj.nombre}, vida: {this.state.pj.vida}</p>\r\n        <br />\r\n        <h1>Historial:</h1>\r\n        <div aria-live=\"polite\">\r\n        <p>{this.state.info}</p>\r\n        </div>\r\n        <br />\r\n        <h1>Ataques</h1>\r\n        {this.state.pj.ataques.map((ataque, index) => <button onClick={(e) => this.atacar(e, ataque)}>{ataque.nombre}</button>)}\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  atacar(e, ataque) {\r\n    e.preventDefault();\r\n    this.setState({ info: ataque.nombre });\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { HashRouter, Route, Switch } from 'react-router-dom'\r\nimport Home from './components/Home';\r\nimport SeleccionarPersonaje from './components/SeleccionarPersonaje';\r\nimport Juego from './components/Juego';\r\n\r\nexport default class App extends Component {\r\n  render() {\r\n    return (\r\n      <HashRouter>\r\n      <Switch>\r\n        <Route path=\"/\" component={Home} exact/>\r\n        <Route path=\"/select\" component={SeleccionarPersonaje} exact/>\r\n        <Route path=\"/game\" component={Juego} exact/>\r\n      </Switch>\r\n      </HashRouter>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}