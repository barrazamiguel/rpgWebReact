{"version":3,"sources":["components/Home.js","datos.js","components/SeleccionarPersonaje.js","components/Juego.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","state","pj","to","React","Component","Pj","nombre","vida","this","ataques","ataque","push","Ataque","poder","patada","golpe","juan","addAttack","jorge","PJS","SeleccionarPersonaje","onSubmit","seleccionar","bind","onChange","datosPj","map","index","value","aria-live","type","e","setState","target","preventDefault","history","pathname","Juego","location","info","onClick","atacar","App","path","component","exact","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.93cb5c8f.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default class Home extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state ={\r\n      pj: props.pj\r\n    }\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Bienvenido:</h1>\r\n        <br />\r\n        <p>este es un juego mas.<br />\r\n        <Link to=\"/select\">Iniciar</Link>\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","class Pj {\r\n  constructor(nombre, vida) {\r\n    this.nombre = nombre;\r\n    this.vida = vida;\r\n    this.ataques = [];\r\n  }\r\n  addAttack(ataque) {\r\n    this.ataques.push(ataque);\r\n  }\r\n  \r\n}\r\n\r\nclass Ataque {\r\n  constructor(nombre, poder) {\r\n    this.nombre = nombre;\r\n    this.poder = poder;\r\n  }\r\n}\r\n\r\n// ataques:\r\nlet patada = new Ataque(\"patada\", 3);\r\nlet golpe = new Ataque(\"golpe\", 2);\r\n\r\n// declaracion de personajes:\r\nlet juan = new Pj(\"juan\", 20);\r\njuan.addAttack(patada);\r\njuan.addAttack(golpe);\r\n\r\n// enemigos:\r\nlet jorge = new Pj(\"jorge\", 20);\r\njorge.addAttack(patada);\r\njorge.addAttack(golpe);\r\n\r\n\r\n\r\n\r\nexport const PJS = [\r\njuan,\r\nnew Pj(\"sofia\", 30)\r\n];\r\n\r\nexport  const PNJ = [jorge];\r\n","import React from 'react';\r\nimport {PJS} from '../datos';\r\n\r\nexport default class SeleccionarPersonaje extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state ={\r\n      pj: PJS[0]\r\n    }\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div>\r\n      <form onSubmit={this.seleccionar.bind(this)}>\r\n        <p>Seleccione con que personaje desea jugar:</p>\r\n        <p><select onChange={this.datosPj.bind(this)}>\r\n        {PJS.map((pj, index) => <option value={index}>{pj.nombre}</option>)}\r\n        </select></p>\r\n        <div aria-live=\"polite\">\r\n          <p><h1>Datos de {this.state.pj.nombre}:</h1>\r\n          puntos de vida: {this.state.pj.vida}.</p>\r\n        </div>\r\n        <p><input type=\"submit\" value=\"seleccionar\" /></p>\r\n      </form>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  datosPj(e) {\r\n    this.setState({ pj: PJS[e.target.value] });\r\n  }\r\n  \r\n  seleccionar(e) {\r\n    e.preventDefault();\r\n    this.props.history.push({\r\n      pathname: '/game',\r\n      state: { pj: this.state.pj }\r\n    })\r\n    }\r\n\r\n}\r\n","import React from 'react';\r\n\r\nexport default class Juego extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state ={\r\n      pj: props.location.state.pj,\r\n      info: \"Realiza tu primer ataque.\"\r\n    }\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Datos:</h1>\r\n        <p>{this.state.pj.nombre}, vida: {this.state.pj.vida}</p>\r\n        <br />\r\n        <h1>Historial:</h1>\r\n        <div aria-live=\"polite\">\r\n        <p>{this.state.info}</p>\r\n        </div>\r\n        <br />\r\n        <h1>Ataques</h1>\r\n        {this.state.pj.ataques.map((ataque, index) => <button onClick={(e) => this.atacar(e, ataque)}>{ataque.nombre}</button>)}\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  atacar(e, ataque) {\r\n    e.preventDefault();\r\n    this.setState({ info: ataque.nombre });\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\r\nimport Home from './components/Home';\r\nimport SeleccionarPersonaje from './components/SeleccionarPersonaje';\r\nimport Juego from './components/Juego';\r\n\r\nexport default class App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <BrowserRouter>\r\n      <Switch>\r\n        <Route path=\"/\" component={Home} exact/>\r\n        <Route path=\"/select\" component={SeleccionarPersonaje} exact/>\r\n        <Route path=\"/game\" component={Juego} exact/>\r\n      </Switch>\r\n      </BrowserRouter>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}